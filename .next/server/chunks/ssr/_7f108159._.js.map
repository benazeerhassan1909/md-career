{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/benazeer/Local%20Sites/md-career/src/components/DisableDraftMode.tsx"],"sourcesContent":["\"use client\";\n\nimport { useDraftModeEnvironment } from \"next-sanity/hooks\";\n\nexport function DisableDraftMode() {\n    const environment = useDraftModeEnvironment();\n\n    // Only show the disable draft mode button when outside of Presentation Tool\n    if (environment !== \"live\" && environment !== \"unknown\") {\n        return null;\n    }\n\n    return (\n        <a\n            href=\"/api/draft-mode/disable\"\n            className=\"fixed bottom-4 right-4 bg-gray-50 px-4 py-2\"\n        >\n            Disable Draft Mode\n        </a>\n    );\n}"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIO,SAAS;IACZ,MAAM,cAAc,CAAA,GAAA,2JAAA,CAAA,0BAAuB,AAAD;IAE1C,4EAA4E;IAC5E,IAAI,gBAAgB,UAAU,gBAAgB,WAAW;QACrD,OAAO;IACX;IAEA,qBACI,8OAAC;QACG,MAAK;QACL,WAAU;kBACb;;;;;;AAIT","debugId":null}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"file":"client-component.js","sources":["file:///Users/benazeer/Local%20Sites/md-career/node_modules/next-sanity/src/visual-editing/client-component/VisualEditingLazy.tsx"],"sourcesContent":["/**\n *\n * If pages router supported `next/dynamic` imports (it wants `next/dynamic.js`),\n * or if turbopack in app router allowed `next/dynamic.js` (it doesn't yet)\n * we could use `dynamic(() => import('...), {ssr: false})` here.\n * Since we can't, we need to use a lazy import and Suspense ourself.\n */\n\nimport {lazy, Suspense} from 'react'\n\nimport type {VisualEditingProps} from './VisualEditing'\n\nconst VisualEditingClientComponent = lazy(() => import('./VisualEditing'))\n\nexport function VisualEditingLazyClientComponent(props: VisualEditingProps): React.ReactNode {\n  return (\n    <Suspense fallback={null}>\n      <VisualEditingClientComponent {...props} />\n    </Suspense>\n  )\n}\n"],"names":[],"mappings":";;;;;;;;AAYA,MAAM,yOAA+B,OAAA,EAAK,MAAM,OAAO,gCAAiB,CAAC;AAElE,SAAS,iCAAiC,KAAA,EAA4C;IAEzF,OAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,wMAAC,WAAA,EAAA;QAAS,UAAU;QAClB,UAAA,aAAA,GAAA,CAAA,GAAA,uNAAA,CAAA,MAAA,EAAC,8BAA8B;YAAA,GAAG,KAAA;QAAA,CAAO;IAC3C,CAAA;AAEJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///Users/benazeer/Local%20Sites/md-career/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored[\n  'react-ssr'\n].ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,4HAAyBC,QAAQ,CACxD,YACD,CAACC,kBAAkB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"file":"hooks.js","sources":["file:///Users/benazeer/Local%20Sites/md-career/node_modules/%40sanity/next-loader/src/hooks/useDraftMode.ts","file:///Users/benazeer/Local%20Sites/md-career/node_modules/%40sanity/next-loader/src/hooks/useIsPresentationTool.ts","file:///Users/benazeer/Local%20Sites/md-career/node_modules/%40sanity/next-loader/src/hooks/useIsLivePreview.ts"],"sourcesContent":["import {useCallback, useSyncExternalStore} from 'react'\nimport {\n  environment,\n  environmentListeners,\n  perspective,\n  perspectiveListeners,\n  type DraftEnvironment,\n  type DraftPerspective,\n} from './context'\n\n/**\n * Reports the current draft mode environment.\n * Use it to determine how to adapt the UI based on wether:\n * - Your app is previewed in a iframe, inside Presentation Tool in a Sanity Studio.\n * - Your app is previewed in a new window, spawned from Presentation Tool in a Sanity Studio.\n * - Your app is live previewing drafts in a standalone context.\n * - Your app is previewing drafts, but not live.\n * - Your app is not previewing anything (that could be detected).\n * @public\n */\nexport function useDraftModeEnvironment(): DraftEnvironment {\n  const subscribe = useCallback((listener: () => void) => {\n    environmentListeners.add(listener)\n    return () => environmentListeners.delete(listener)\n  }, [])\n\n  return useSyncExternalStore(\n    subscribe,\n    () => environment,\n    () => 'checking',\n  )\n}\n\n/**\n * Reports the Sanity Client perspective used to fetch data in `sanityFetch` used on the page.\n * If the hook is used outside Draft Mode it will resolve to `'unknown'`.\n * If the hook is used but the `<SanityLive />` component is not present then it'll stay in `'checking'` and console warn after a timeout that it seems like you're missing the component.\n * @public\n */\nexport function useDraftModePerspective(): DraftPerspective {\n  const subscribe = useCallback((listener: () => void) => {\n    perspectiveListeners.add(listener)\n    return () => perspectiveListeners.delete(listener)\n  }, [])\n\n  return useSyncExternalStore(\n    subscribe,\n    () => perspective,\n    () => 'checking',\n  )\n}\n","import {useDraftModeEnvironment} from './useDraftMode'\n\n/**\n * Detects if the application is being previewed inside Sanity Presentation Tool.\n * Presentation Tool can open the application in an iframe, or in a new window.\n * When in this context there are some UI you usually don't want to show,\n * for example a Draft Mode toggle, or a \"Viewing draft content\" indicators, these are unnecessary and add clutter to\n * the editorial experience.\n * The hook returns `null` initially, when it's not yet sure if the application is running inside Presentation Tool,\n * then `true` if it is, and `false` otherwise.\n * @public\n */\nexport function useIsPresentationTool(): boolean | null {\n  const environment = useDraftModeEnvironment()\n  return environment === 'checking'\n    ? null\n    : environment === 'presentation-iframe' || environment === 'presentation-window'\n}\n","import {useDraftModeEnvironment} from './useDraftMode'\n\n/**\n * Detects if the application is considered to be in a \"Live Preview\" mode.\n * Live Preview means that the application is either:\n * - being previewed inside Sanity Presentation Tool\n * - being previewed in Draft Mode, with a `browserToken` given to `defineLive`, also known as \"Standalone Live Preview'\"\n * When in Live Preview mode, you typically want UI to update as new content comes in, without any manual intervention.\n * This is very different from Live Production mode, where you usually want to delay updates that might cause layout shifts,\n * to avoid interrupting the user that is consuming your content.\n * This hook lets you adapt to this difference, making sure production doesn't cause layout shifts that worsen the UX,\n * while in Live Preview mode layout shift is less of an issue and it's better for the editorial experience to auto refresh in real time.\n *\n * The hook returns `null` initially, to signal it doesn't yet know if it's live previewing or not.\n * Then `true` if it is, and `false` otherwise.\n * @public\n */\nexport function useIsLivePreview(): boolean | null {\n  const environment = useDraftModeEnvironment()\n  return environment === 'checking'\n    ? null\n    : environment === 'presentation-iframe' ||\n        environment === 'presentation-window' ||\n        environment === 'live'\n}\n"],"names":["environment"],"mappings":";;;;;;;;;;;AAoBO,SAAS,0BAA4C;IAC1D,MAAM,sNAAY,cAAA,EAAY,CAAC,WAAA,gLAC7B,uBAAA,CAAqB,GAAA,CAAI,QAAQ,GAC1B,mLAAM,uBAAA,CAAqB,MAAA,CAAO,QAAQ,CAAA,GAChD,CAAA,CAAE;IAEE,iNAAA,uBAAA,EACL,WACA,mLAAM,cAAA,EACN,IAAM;AAEV;AAQO,SAAS,0BAA4C;IAC1D,MAAM,sNAAY,cAAA,EAAY,CAAC,WAAA,gLAC7B,uBAAA,CAAqB,GAAA,CAAI,QAAQ,GAC1B,mLAAM,uBAAA,CAAqB,MAAA,CAAO,QAAQ,CAAA,GAChD,CAAA,CAAE;IAEE,iNAAA,uBAAA,EACL,WACA,mLAAM,cAAA,EACN,IAAM;AAEV;ACtCO,SAAS,wBAAwC;IACtD,MAAMA,eAAc,wBAAwB;IAC5C,OAAOA,iBAAgB,aACnB,OACAA,iBAAgB,yBAAyBA,iBAAgB;AAC/D;ACAO,SAAS,mBAAmC;IACjD,MAAMA,eAAc,wBAAwB;IAC5C,OAAOA,iBAAgB,aACnB,OACAA,iBAAgB,yBACdA,iBAAgB,yBAChBA,iBAAgB;AACxB","ignoreList":[0,1,2],"debugId":null}}]
}