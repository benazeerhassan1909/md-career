{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/benazeer/Local%20Sites/md-career/src/sanity/env.ts"],"sourcesContent":["export const apiVersion =\n  process.env.NEXT_PUBLIC_SANITY_API_VERSION || '2025-04-03'\n\nexport const dataset = assertValue(\n  process.env.NEXT_PUBLIC_SANITY_DATASET,\n  'Missing environment variable: NEXT_PUBLIC_SANITY_DATASET'\n)\n\nexport const projectId = assertValue(\n  process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,\n  'Missing environment variable: NEXT_PUBLIC_SANITY_PROJECT_ID'\n)\n\nfunction assertValue<T>(v: T | undefined, errorMessage: string): T {\n  if (v === undefined) {\n    throw new Error(errorMessage)\n  }\n\n  return v\n}\n"],"names":[],"mappings":";;;;;AACE;AADK,MAAM,aACX,gKAAA,CAAA,UAAO,CAAC,GAAG,CAAC,8BAA8B,IAAI;AAEzC,MAAM,UAAU,4DAErB;AAGK,MAAM,YAAY,0DAEvB;AAGF,SAAS,YAAe,CAAgB,EAAE,YAAoB;IAC5D,IAAI,MAAM,WAAW;QACnB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///Users/benazeer/Local%20Sites/md-career/src/sanity/lib/client.ts"],"sourcesContent":["import { createClient } from 'next-sanity'\n\nimport { apiVersion, dataset, projectId } from '../env'\n\nexport const client = createClient({\n  projectId,\n  dataset,\n  apiVersion,\n  useCdn: true, // Set to false if statically generating pages, using ISR or tag-based revalidation\n  stega: { studioUrl: '/studio' },\n\n})\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEO,MAAM,SAAS,CAAA,GAAA,iLAAA,CAAA,eAAY,AAAD,EAAE;IACjC,WAAA,uHAAA,CAAA,YAAS;IACT,SAAA,uHAAA,CAAA,UAAO;IACP,YAAA,uHAAA,CAAA,aAAU;IACV,QAAQ;IACR,OAAO;QAAE,WAAW;IAAU;AAEhC","debugId":null}},
    {"offset": {"line": 56, "column": 0}, "map": {"version":3,"sources":["file:///Users/benazeer/Local%20Sites/md-career/src/components/Form.tsx"],"sourcesContent":["\n\"use client\";\nimport React, { useState, useEffect } from 'react';\nimport { client } from '../sanity/lib/client';\n\nconst JobApplicationForm = ({ jobId }) => {\n    const [job, setJob] = useState(null);\n    const [form, setForm] = useState(null);\n    const [formData, setFormData] = useState({});\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [submitMessage, setSubmitMessage] = useState('');\n\n    // Fetch job data and associated form\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                // Fetch the job document with the form reference\n                const jobData = await client.fetch(\n                    `*[_type == \"job\" && _id == $jobId][0]{\n            ...,\n            chooseForm->\n          }`,\n                    { jobId }\n                );\n\n                setJob(jobData);\n                setForm(jobData.chooseForm);\n\n                // Initialize form data object\n                if (jobData.chooseForm?.fields) {\n                    const initialData = {};\n                    jobData.chooseForm.fields.forEach(field => {\n                        initialData[field.name] = '';\n                    });\n                    setFormData(initialData);\n                }\n            } catch (error) {\n                console.error('Error fetching data:', error);\n            }\n        };\n\n        fetchData();\n    }, [jobId]);\n\n    const handleChange = (e) => {\n        const { name, value, type, checked } = e.target;\n        setFormData({\n            ...formData,\n            [name]: type === 'checkbox' ? checked : value,\n        });\n    };\n\n    const handleFileChange = (e) => {\n        const { name, files } = e.target;\n        setFormData({\n            ...formData,\n            [name]: files[0],\n        });\n    };\n\n    // const handleSubmit = async (e) => {\n    //     e.preventDefault();\n    //     setIsSubmitting(true);\n\n    //     try {\n    //         // Here you would typically send the form data to your backend\n    //         console.log('Form submitted:', formData);\n\n    //         // Simulate API call\n    //         await new Promise(resolve => setTimeout(resolve, 1000));\n\n    //         setSubmitMessage('Application submitted successfully!');\n    //         // Reset form after successful submission\n    //         const resetData = {};\n    //         form.fields.forEach(field => {\n    //             resetData[field.name] = '';\n    //         });\n    //         setFormData(resetData);\n    //     } catch (error) {\n    //         console.error('Submission error:', error);\n    //         setSubmitMessage('Error submitting application. Please try again.');\n    //     } finally {\n    //         setIsSubmitting(false);\n    //     }\n    // };\n    const handleSubmitm = async (e: React.FormEvent) => {\n        e.preventDefault()\n        setIsSubmitting(true)\n        setError(null)\n\n        try {\n            await submitCareerForm(form)\n\n            setSubmitMessage('Application submitted successfully!');\n            const resetData = {};\n            form.fields.forEach(field => {\n                resetData[field.name] = '';\n            });\n\n            setFormData(resetData);\n        } catch (err) {\n            console.error(err)\n            setSubmitMessage('Error submitting application. Please try again.');\n        } finally {\n            setIsSubmitting(false)\n        }\n    }\n\n\n    if (!form) {\n        return <div>Loading form...</div>;\n    }\n\n    return (\n        <div className=\"max-w-2xl mx-auto p-6 bg-white rounded-lg shadow-md\">\n            <h2 className=\"text-2xl font-bold mb-6\">{form.title || 'Job Application'}</h2>\n\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n                {form.fields.map((field, index) => (\n                    <div key={index} className=\"space-y-2\">\n                        {!field.showPlaceholder && (\n                            <label htmlFor={field.name} className=\"block text-sm font-medium text-gray-700\">\n                                {field.label}\n                                {field.isRequired && <span className=\"text-red-500\">*</span>}\n                            </label>\n                        )}\n\n                        {field.type === 'textarea' ? (\n                            <textarea\n                                id={field.name}\n                                name={field.name}\n                                value={formData[field.name] || ''}\n                                onChange={handleChange}\n                                placeholder={field.showPlaceholder ? field.label : field.placeholder}\n                                required={field.isRequired}\n                                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n                                rows={4}\n                            />\n                        ) : field.type === 'checkbox' ? (\n                            <div className=\"flex items-center\">\n                                <input\n                                    id={field.name}\n                                    name={field.name}\n                                    type=\"checkbox\"\n                                    checked={formData[field.name] || false}\n                                    onChange={handleChange}\n                                    className=\"h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                                />\n                                <label htmlFor={field.name} className=\"ml-2 block text-sm text-gray-700\">\n                                    {field.label}\n                                </label>\n                            </div>\n                        ) : field.type === 'file' ? (\n                            <input\n                                id={field.name}\n                                name={field.name}\n                                type=\"file\"\n                                onChange={handleFileChange}\n                                required={field.isRequired}\n                                className=\"block w-full text-sm text-gray-500\n                  file:mr-4 file:py-2 file:px-4\n                  file:rounded-md file:border-0\n                  file:text-sm file:font-semibold\n                  file:bg-blue-50 file:text-blue-700\n                  hover:file:bg-blue-100\"\n                            />\n                        ) : (\n                            <input\n                                id={field.name}\n                                name={field.name}\n                                type={field.type}\n                                value={formData[field.name] || ''}\n                                onChange={handleChange}\n                                placeholder={field.showPlaceholder ? field.label : field.placeholder}\n                                required={field.isRequired}\n                                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n                            />\n                        )}\n                    </div>\n                ))}\n\n                <div className=\"pt-4\">\n                    <button\n                        type=\"submit\"\n                        disabled={isSubmitting}\n                        className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                        {isSubmitting ? 'Submitting...' : form.submitButtonText || 'Submit'}\n                    </button>\n                </div>\n\n                {submitMessage && (\n                    <p className={`mt-3 text-sm ${submitMessage.includes('Error') ? 'text-red-500' : 'text-green-500'}`}>\n                        {submitMessage}\n                    </p>\n                )}\n            </form>\n        </div>\n    );\n};\n\nexport default JobApplicationForm;"],"names":[],"mappings":"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","debugId":null}}]
}